<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0到1搭建一套CI/CD流程</title>
      <link href="/diary/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97ci-cd%E6%B5%81%E7%A8%8B.html"/>
      <url>/diary/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97ci-cd%E6%B5%81%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<p>以往的的构建部署流程为编写代码、上传代码库、编译压缩为制品、上传到服务器启动。这套流程不仅繁琐，且容易出错，是非常影响开发效率的。为了高效的构建和部署，我们就需要学习<strong>CI/CD</strong>了。</p><p><code>CI</code> 的意思是 <code>持续构建</code> 。负责拉取代码库中的代码后，执行用户预置定义好的操作脚本，通过一系列编译操作构建出一个 <code>制品</code> ，并将制品推送至到制品库里面。常用工具有 Gitlab CI，Github CI，Jenkins 等。这个环节不参与部署，只负责构建代码，然后保存构建物。构建物被称为 制品，保存制品的地方被称为 <strong>制品库</strong>。</p><p>CD 则有2层含义： <code>持续部署（Continuous Deployment）</code> 和 <code>持续交付（Continuous Delivery）</code> 。 <code>持续交付</code> 的概念是：将制品库的制品拿出后，部署在测试环境 / 交付给客户提前测试。 <code>持续部署</code> 则是将制品部署在生产环境。可以进行持续部署的工具也有很多： <code>Ansible</code> 批量部署， <code>Docker</code> 直接推拉镜像等等。当然也包括我们后面要写到的 <code>Kubernetes</code> 集群部署。</p><span id="more"></span><h2 id="服务器配置方案"><a href="#服务器配置方案" class="headerlink" title="服务器配置方案"></a>服务器配置方案</h2><p>本次教程记录使用的服务器为购买的二手Dell R720服务器，按照以下表格创建五个虚拟机，每个虚拟机安装的系统都为<strong>Centos7</strong>，<a href="https://link.juejin.cn/?target=https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">下载地址</a>。大家如果使用云服务器，按照同样的配置购买即可。</p><table><thead><tr><th>配置</th><th>技术栈</th><th>类型</th><th>标签</th></tr></thead><tbody><tr><td>8核16G</td><td>Jenkins + Nexus + Docker</td><td>虚拟机</td><td>构建机</td></tr><tr><td>8核16G</td><td>Kibana</td><td>虚拟机</td><td>日志收集</td></tr><tr><td>8核16G</td><td>Docker + Kubernetes</td><td>虚拟机</td><td>Kubernetes Master</td></tr><tr><td>4核8G</td><td>Docker + Kubernetes</td><td>虚拟机</td><td>Kubernetes Node</td></tr><tr><td>4核8G</td><td>Docker + Kubernetes</td><td>虚拟机</td><td>Kubernetes Node</td></tr></tbody></table><h2 id="构建机的安装"><a href="#构建机的安装" class="headerlink" title="构建机的安装"></a>构建机的安装</h2><p>本台机器我们安装三个软件，Docker - 服务载体，Jenkins - 构建工具，Nexus - 制品仓库。</p><h3 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h3><p>docker贯穿CI/CD中整个流程，作为应用服务的载体有着非常重要的地位。我们可以使用docker将应用打包成一个镜像，交给kubernetes去部署在目标服务集群。并且可以将镜像上传到自己的镜像仓库，做好版本分类处理。</p><p>安装方式：添加docker的镜像源，可以加速docker的安装，然后进行yum安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 安装yum扩展包，安装后可以使用yum-config-manager来方便的添加源</span><br><span class="line">yum install yum-utils</span><br><span class="line"></span><br><span class="line"># 增加镜像源</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># 安装docker</span><br><span class="line">yum install docker-ce</span><br><span class="line"></span><br><span class="line"># 查看安装版本</span><br><span class="line">$ docker -v</span><br><span class="line">Docker version 20.10.12, build e91ed57</span><br></pre></td></tr></table></figure><p>镜像加速器的配置，拉取官方的镜像库的镜像，会比较慢，我们改用国内阿里的镜像库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo cd /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://llu06o1m.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="jenkis的安装"><a href="#jenkis的安装" class="headerlink" title="jenkis的安装"></a>jenkis的安装</h3><p>首先需要安装git，在ci流程中构建机需要去拉取代码，所以必须得安装git。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装命令</span><br><span class="line">yum install -y git</span><br><span class="line"></span><br><span class="line"># 查看安装版本</span><br><span class="line">$ git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><p>因为Jenkins是Java编写的持续构建平台，所以安装Java必不可少。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装命令</span><br><span class="line">yum install -y java</span><br><span class="line"></span><br><span class="line"># 查看安装版本</span><br><span class="line">$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_322&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_322-b06)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode)</span><br></pre></td></tr></table></figure><p>由于yum源不自带jenkins的安装源，于是我们需要自己导入一份jenkins安装源进行安装。导入后，使用yum命令安装即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 下载源文件</span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"># 导入软件源</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line"># 安装jenkins</span><br><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><blockquote><p>rpm适用于所有环境，而yum要有本地yum源才可以使用。yum是上层管理工具，可以自动解决依赖性，而rpm是底层管理工具。</p><p>yum是基于rpm包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p></blockquote> <p>jenkins安装成功后，会将启动命令注册到系统systemd命令中。我们可以直接通过systemctl操作jenkins。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start jenkins</span><br><span class="line"># 重启</span><br><span class="line">systemctl restart jenkins</span><br><span class="line"># 停止</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><p>在启动前，先进行防火墙设置，放开8080端口的访问。因为jenkins启动默认的端口为8080，需要修改在**/etc/sysconfig/jenkins<strong>配置文件中的</strong>JENKINS_PORT**，我们这里使用默认的8080。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加开放端口</span><br><span class="line">firewall-cmd --permanent --add-port=8080/tcp</span><br><span class="line"># 重新加载配置</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 查看开放端口列表</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p>启动完成后，我们使用<strong>IP:8080</strong>来进行访问，我们可以看到解锁jenkins界面，执行下面的命令，获取密码，输入密码后确定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>下一步我们需要安装插件，我们选推荐的插件，后续需要其他插件再去安装，安装完插件，注册个账号即完成了安装。</p><p>我们要使用jenkins操作docker，需要进行权限设定，否则用不了。docker提供了一个用户组的概念。我们可以将执行Shell的用户添加到名称为docker的用户组，则可以正常执行docker命令。设置好后我们重启jenkins，就可以试试创建流水线脚本使用docker。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将当前用户添加至docker用户组</span><br><span class="line">gpasswd -a jenkins docker</span><br><span class="line"></span><br><span class="line"># 更新docker用户组</span><br><span class="line">newgrp docker</span><br><span class="line"></span><br><span class="line"># 重启jenkins</span><br><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><h3 id="Nexus的安装"><a href="#Nexus的安装" class="headerlink" title="Nexus的安装"></a>Nexus的安装</h3><p>镜像库就是集中存放镜像的一个文件服务。镜像库在CI/CD中，又称制品库。构建后的产物称为制品，制品则要放到制品库做中转和版本管理。常用平台有Nexus，Jfrog，Harbor或其他对象存储平台。</p><p>在这里，我们选用Nexus3作为自己的镜像库。因为其稳定，性能好，免费，部署方便，且支持类型多，是许多制品库的首选选型。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建个人博客</title>
      <link href="/diary/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
      <url>/diary/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<p>首先需要了解什么是hexo？</p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本文主要介绍使用hexo进行搭建博客的过程和常见问题，在评论方案使用了gitalk，主题上使用hexo-theme-sky，开发电脑使用的macbook。</p><span id="more"></span><h2 id="开始前准备"><a href="#开始前准备" class="headerlink" title="开始前准备"></a>开始前准备</h2><p>在开始之前，我们需要在本地安装的软件。（我们假设你已经了解node国内镜像源、git命令、github是啥、生成ssh密钥并且在github配置哦）</p><ul><li>git</li><li>node</li></ul><p>完成了软件的安装，我们需要掌握的资源链接等。</p><ul><li>hexo官方教程地址： <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li>hexo官方主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></li><li>gitalk评论系统地址：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></li><li>hexo-theme-sky主题地址：<a href="https://github.com/iJinxin/hexo-theme-sky">https://github.com/iJinxin/hexo-theme-sky</a></li></ul><h2 id="搭建基本项目"><a href="#搭建基本项目" class="headerlink" title="搭建基本项目"></a>搭建基本项目</h2><p>首先需要安装hexo-cli，这是后面我们需要用到的hexo客户端，可以帮助我们进行生成静态文件、发布上线、生成新文章文件等等。</p><p>安装命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成之后，我们需要把hexo可执行文件，加入到系统的bin目录中，方便全局使用hexo，mac和linux都可以把hexo进行copy到/usr/local/bin目录下，这个目录一般都在系统的环境变量下。win系统的话，把hexo的绝对路径添加到环境变量中即可。</p><p>接下来，我们来初始化项目，folder换成你起的文件夹名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行以上命令后，会生成项目目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml // 博客的配置文件</span><br><span class="line">├── package.json // 依赖的包</span><br><span class="line">├── scaffolds // 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">├── source // 资源文件夹是存放用户资源的地方，我们编写的文章也在这里，一般命令创建的默认在 _posts。</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes // 主题 文件夹。Hexo 会根据主题来生成静态页面，我们可以在主题库找到喜欢的，拉取到这里。</span><br></pre></td></tr></table></figure><h2 id="进行博客配置"><a href="#进行博客配置" class="headerlink" title="进行博客配置"></a>进行博客配置</h2><p>项目下的_config.yml中可以进行配置网站、网址、目录、文章、分类、标签、日期 / 时间格式、分页、扩展这些项目。我列出我们常用的配置，其他的给默认值就可以了。</p><p>大家只需要配置<strong>网站</strong>的相关信息和使用的<strong>主题</strong>以及发布<strong>部署</strong>即可、对于评论和部署，我在后面介绍，大家先进行网站信息配置就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 网站</span><br><span class="line">title: &#x27;三喵notes&#x27;</span><br><span class="line">subtitle: &#x27;三喵notes&#x27;</span><br><span class="line">description: &#x27;一个正在努力学习的编程菜狗&#x27;</span><br><span class="line">keywords:</span><br><span class="line">  - DevOps</span><br><span class="line">  - Linux</span><br><span class="line">  - PHP</span><br><span class="line">  - GO</span><br><span class="line">author: &#x27;三喵&#x27;</span><br><span class="line">since: &#x27;2021&#x27;</span><br><span class="line">language: &#x27;zh-cn&#x27;</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;</span><br><span class="line"></span><br><span class="line"># 网址</span><br><span class="line">url: https://esaiting.github.io/diary</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true</span><br><span class="line">  trailing_html: true</span><br><span class="line"></span><br><span class="line"># 扩展</span><br><span class="line">theme: sky</span><br><span class="line"></span><br><span class="line"># 评论设置</span><br><span class="line">comment:</span><br><span class="line">  id: &#x27;ac5bcf4f0c991*****&#x27;</span><br><span class="line">  secret: &#x27;35001628275065c8216c7d*****&#x27;</span><br><span class="line">  repo: &#x27;diary&#x27;</span><br><span class="line">  owner: &#x27;sanmiaohub&#x27;</span><br><span class="line"></span><br><span class="line"># 部署</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/sanmiaohub/diary.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用命令学习"><a href="#常用命令学习" class="headerlink" title="常用命令学习"></a>常用命令学习</h2><ul><li><p>init 新建一个网站，这个命令我们已经使用过了。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure></li><li><p>new 新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。我们创建文件的时候用这个命令，比如 <strong>hexo new “今天是周五”<strong>，这样会在_post下生成</strong>今天是周五.md</strong>文件。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>clean 清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li><li><p>generate &amp;&amp;  deploy 这两个命令一般用简写法快速进行。他会自动生成静态文件放入public，然后推送上去到github。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate // 生成静态文件</span><br><span class="line">hexo deploy // 部署网站</span><br><span class="line">hexo g -d // 快速的方式</span><br></pre></td></tr></table></figure></li></ul><p>以上是我们常用的命令，更多的命令到官网进行观看学习<a href="https://hexo.io/zh-cn/docs/commands">官网命令</a>。</p><h2 id="写作文章"><a href="#写作文章" class="headerlink" title="写作文章"></a>写作文章</h2><p>前面我们说过使用命令<strong>hexo new title</strong>可以创建文章，我们看下文章的模板。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 今天是周五</span><br><span class="line">date: 2022-02-25 00:05:10</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在线下面进行按照markdown的语法编写即可。然后通过上面的部署命令进行发布上线就可以观看了。</p><h2 id="部署Github上线"><a href="#部署Github上线" class="headerlink" title="部署Github上线"></a>部署Github上线</h2><p>首先我们需要一个github账号，可以在网站**<a href="https://github.com/**%E8%BF%9B%E8%A1%8C%E7%94%B3%E8%AF%B7%E3%80%82%E7%94%B3%E8%AF%B7%E5%AE%8C%E6%88%90%E8%B4%A6%E5%8F%B7%E5%90%8E%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E4%BA%86%E3%80%82">https://github.com/**进行申请。申请完成账号后进行登录，然后我就可以创建仓库了。</a></p><p>创建仓库的步骤是，点击右上角<strong>头像</strong>-&gt;<strong>Your repositories</strong>-&gt;点击蓝色的<strong>New</strong>按钮-&gt;输入<strong>Repository name</strong>来给仓库起名-&gt;其余的不用管，继续点击<strong>Create repository</strong>完成仓库创建。</p><p>现在我们需要找到我们的项目链接，点击右上角<strong>头像</strong>-&gt;<strong>Your repositories</strong>-&gt;点击刚才起的<strong>仓库名</strong>进入新页面-&gt;点击屏幕中间的蓝色按钮<strong>code</strong>会弹窗-&gt;复制<strong>Https</strong>的链接。</p><p>继续在当前页面，点击上方的<strong>Settings</strong>-&gt;点击左方的<strong>Pages</strong>-&gt;把<strong>Source</strong>的分支选择为<strong>master</strong>其他的不动，点击<strong>Save</strong>保存即可。</p><p>现在可以进行配置项目文件。在项目目录下编辑_config.yml编写下面的代码保存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 部署</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/sanmiaohub/diary.git // 换成你刚才复制的</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后在项目目录下面执行插件安装，插件安装完成后，可以进行部署发布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save // 安装插件</span><br><span class="line"></span><br><span class="line">hexo g -d // 部署上线</span><br></pre></td></tr></table></figure><h2 id="更换喜欢的主题"><a href="#更换喜欢的主题" class="headerlink" title="更换喜欢的主题"></a>更换喜欢的主题</h2><p>我们以我上面准备的主题为例，在项目目录下，执行以下命令进行下载。他会把主题文件下载到项目目录下的themes，注意：themes是放主题的目录，可以放很多，sky是这个主题的目录名称，下载好后，在项目下的_config.yml进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iJinxin/hexo-theme-sky themes/sky</span><br><span class="line"></span><br><span class="line"># 扩展 _config.yml</span><br><span class="line">theme: sky</span><br></pre></td></tr></table></figure><p>主题都是有配置的，生成静态文件的时候，会把主题的配置文件和项目下的配置文件合并，相同的key，主题的优先级高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  sky git:(master) ✗ ls    </span><br><span class="line">// 主题目录下的文件和文件夹</span><br><span class="line">README.md   _config.yml languages   layout      source </span><br></pre></td></tr></table></figure><p>查看主题的配置，当前这个主题只有一个菜单的配置，按以下方式配置，可以有三个菜单导航。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 导航菜单</span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  Archives: /archives</span><br><span class="line">  Tags: /tags</span><br><span class="line">  About: /about</span><br></pre></td></tr></table></figure><h2 id="生成菜单导航的方式"><a href="#生成菜单导航的方式" class="headerlink" title="生成菜单导航的方式"></a>生成菜单导航的方式</h2><p>我们看以下三个菜单导航。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── _posts</span><br><span class="line">├── about</span><br><span class="line">└──── index.md</span><br><span class="line">├── categories</span><br><span class="line">└──── index.md</span><br><span class="line">└── tags</span><br><span class="line">└──── index.md</span><br></pre></td></tr></table></figure><ul><li>标签导航菜单</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path: tags/index.md</span><br><span class="line"></span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-02-25 00:05:10</span><br><span class="line">layout: tags</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li>分类导航菜单</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path: categories/index.md</span><br><span class="line"></span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-02-25 00:05:10</span><br><span class="line">layout: categories</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li>关于我导航菜单</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">path: about/index.md</span><br><span class="line"></span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-02-25 00:05:10</span><br><span class="line">layout: categories</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">个人信息：</span><br><span class="line"></span><br><span class="line">本人男，九零后，菜狗程序员，主要使用GO、PHP语言，喜欢高科技产品，喜欢码代码，喜欢安静 。</span><br></pre></td></tr></table></figure><p>按以上方式配置，对于这个主题，就会生成总共四个导航菜单。</p><h2 id="评论系统部署"><a href="#评论系统部署" class="headerlink" title="评论系统部署"></a>评论系统部署</h2><p>本主题代码使用的是gitment评论方案，但是这个东西存在着资源问题，进行部分代码修改来完成使用gitalk评论方案。</p><p>我们列出以下主题的目录结构。这里面把其他文件都不做展示，我们只需要修改<strong>layout.ejs</strong>文件让她来支持gitalk就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">│   ├── layout.ejs</span><br><span class="line">└── source</span><br><span class="line">    ├── css</span><br><span class="line">    └── js</span><br></pre></td></tr></table></figure><p>展示文件代码：layout.ejs，以下为修改过的文件内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/header&#x27;) %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/mobile-header&#x27;)%&gt;</span><br><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content-inner&quot;&gt;</span><br><span class="line">        &lt;%- body %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/social&#x27;) %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- js(&#x27;js/index.js&#x27;) %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;% if(config.comment) &#123;%&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: &#x27;&lt;%- config.comment.id %&gt;&#x27;,</span><br><span class="line">        clientSecret: &#x27;&lt;%- config.comment.secret %&gt;&#x27;,</span><br><span class="line">        repo: &#x27;&lt;%- config.comment.repo %&gt;&#x27;,</span><br><span class="line">        owner: &#x27;&lt;%- config.comment.owner %&gt;&#x27;,</span><br><span class="line">        admin: [&#x27;sanmiaohub&#x27;],</span><br><span class="line">        id: decodeURI(location.pathname),</span><br><span class="line">        distractionFreeMode: true</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gitalk.render(&#x27;comment-container&#x27;);</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，我们进行了两处修改：</p><ul><li>第一处，引入了以下两个文件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>第二处，对这个脚本文件进行了修改，之前<strong>new Gitment</strong>，我们需要修改为<strong>new Gitalk</strong>，对应的传参，也按照新的来传递。我们可以看到他取值是按照<strong>config.comment.secret</strong>的方式，那么config就是配置文件合成的数据变量，comment为配置的内容，secret为配置的某一个key。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;% if(config.comment) &#123;%&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: &#x27;&lt;%- config.comment.id %&gt;&#x27;,</span><br><span class="line">        clientSecret: &#x27;&lt;%- config.comment.secret %&gt;&#x27;,</span><br><span class="line">        repo: &#x27;&lt;%- config.comment.repo %&gt;&#x27;,</span><br><span class="line">        owner: &#x27;&lt;%- config.comment.owner %&gt;&#x27;,</span><br><span class="line">        admin: [&#x27;sanmiaohub&#x27;],</span><br><span class="line">        id: decodeURI(location.pathname),</span><br><span class="line">        distractionFreeMode: true</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gitalk.render(&#x27;comment-container&#x27;);</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>来看一下具体的配置信息，以下配置信息来自项目目录下的_config.yml，很明显可以和上面的取值能对上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 评论设置</span><br><span class="line">comment:</span><br><span class="line">  id: &#x27;ac5bcf4f0c991*****&#x27;</span><br><span class="line">  secret: &#x27;35001628275065c8216c7d*****&#x27;</span><br><span class="line">  repo: &#x27;diary&#x27; // 刚才新建仓库，取的仓库名称</span><br><span class="line">  owner: &#x27;sanmiaohub&#x27; // 我的github用户名，在网站右上角点击头像就能看到，Signed in as sanmiaohub</span><br></pre></td></tr></table></figure><p>id和secret的取值来自于<a href="https://github.com/settings/applications/new">Oauth</a>这个网站（实际路径为右上角头像-&gt;Settings-&gt;Developer settings-&gt;名称），还是要登录github。</p><ul><li><p>输入名称：我的是三喵notes，随便输。</p></li><li><p>博客地址：我的是，<a href="https://sanmiaohub.github.io/diary/%EF%BC%8C%E6%8C%89%E4%BD%A0%E7%9A%84%E8%BE%93%E5%85%A5%E3%80%82">https://sanmiaohub.github.io/diary/，按你的输入。</a></p></li><li><p>回调地址：很重要，我的是，<a href="https://sanmiaohub.github.io/%EF%BC%8C%E6%8C%89%E4%BD%A0%E7%9A%84%E8%BE%93%E5%85%A5%E3%80%82">https://sanmiaohub.github.io/，按你的输入。</a></p></li></ul><p>以上为所有的教程步骤，如有问题，请评论留言。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用frp进行内网穿透</title>
      <link href="/diary/%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html"/>
      <url>/diary/%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</url>
      
        <content type="html"><![CDATA[<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><p>本文介绍的环境背景，由于购买了dell r720设备，在家里并没有申请公网，要在公司进行家里的服务器操作，就需要进行内网穿透，通过一台公网云服务器和家里的服务器建立链接，来进行操作处理。</p><span id="more"></span><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>frp 主要由 <strong>客户端(frpc)</strong> 和 <strong>服务端(frps)</strong> 组成，服务端通常部署在具有公网 IP 的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。内网服务由于没有公网 IP，不能被非局域网内的其他用户访问。用户通过访问服务端的 frps，由 frp 负责根据请求的端口或其他信息将请求路由到对应的内网机器，从而实现通信。</p><blockquote><p>其实可以理解为浏览器和服务器的websocket链接，用户所使用的家用电脑没有公网ip，通过浏览器向服务器发起tcp长连接，这样服务器就可以像浏览器发送数据。frp内网穿透是一样的道理。</p></blockquote><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/fatedier/frp/tags">https://github.com/fatedier/frp/tags</a></p><p>下载完成压缩包后（类如frp_0.33.0_linux_amd64.tar.gz），解压后包含的文件如以下，我们解说下压缩包内的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── frpc     // 客户端应用</span><br><span class="line">├── frpc.ini   // 客户端应用配置</span><br><span class="line">├── frpc_full.ini</span><br><span class="line">├── frps     // 服务端应用</span><br><span class="line">├── frps.ini   // 服务端应用配置</span><br><span class="line">├── frps_full.ini</span><br><span class="line">└── systemd   // 用于注册启动守护进行，后面可以方便的用systemctl start frps这类命令来操作</span><br><span class="line">    ├── frpc.service</span><br><span class="line">    ├── frpc@.service</span><br><span class="line">    ├── frps.service</span><br><span class="line">    └── frps@.service</span><br></pre></td></tr></table></figure><h2 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h2><p>首先我们得先将压缩文件放到公网服务器和局域网服务器上，我用的mac电脑，使用scp命令可以方便的将文件发送到服务器，win你可以使用ftp等方式来操作。scp命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp   frp_0.33.0_linux_amd64.tar.gz    root@192.168.31.65:~/</span><br></pre></td></tr></table></figure><p>第一个参数为要上传的文件，第二个为标准的ssh链接格式，冒号后面为要上传到哪个文件夹下。</p><p><strong>在客户端服务器上</strong>：</p><p>修改 frpc.ini 配置文件如下，在通过 <code>./frpc -c ./frpc.ini</code> 启动客户端。如果需要在后台长期运行，建议结合其他工具使用，例如 <code>systemd</code> 和 <code>supervisor</code>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common 是用于建立链接的配置，addr是公网服务器的外网ip，端口号和公网服务器的配置保持一致，token用于链接验证，也需要保持一致</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">47.100</span>.xx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">8000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">921110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当客户端和服务端链接上以后，就可以进行在公司链接家里的服务器，下面的两个配置用于链接命令，下面介绍使用方式。</span></span><br><span class="line"><span class="section">[ssh-frp1]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh-k8s-master]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">31.207</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6001</span></span><br></pre></td></tr></table></figure><p><strong>在服务端（公网）服务器上</strong>：</p><p>修改 frps.ini 配置文件，然后通过 <code>./frps -c ./frps.ini</code> 启动服务端，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bind_port为监听端口，token为授权码，都和上面的客户端配置保持一致</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">8000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">921110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理后台配置 端口 用户 密码</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">dashboard_user</span> = sanmiao</span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="number">921110</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enable_prometheus</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frp 日志</span></span><br><span class="line"><span class="attr">log_file</span> = /var/log/frps.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="远程链接"><a href="#远程链接" class="headerlink" title="远程链接"></a>远程链接</h2><p>通过 SSH 远程访问内网机器，比如我要通过公网访问到客户端的192.168.31.207（ssh-k8s-master）服务器上（需要访问客户端局域网哪个系统，就用配置的ip对应的端口即可）。通过下面命令在终端操作，输入密码需要用客户端的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@47.100.xx.xxx -p 6001</span><br></pre></td></tr></table></figure><h2 id="启用WEB服务"><a href="#启用WEB服务" class="headerlink" title="启用WEB服务"></a>启用WEB服务</h2><p>服务端增加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vhost_http_port=8090</span><br></pre></td></tr></table></figure><p>客户端增加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">type=http</span><br><span class="line">local_ip=127.0.0.1</span><br><span class="line">local_port=8090</span><br><span class="line">remote_port=8090</span><br><span class="line">custom_domains=x.xx.x.xxx # 公网IP或者域名</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>公网服务器我用的阿里云的，需要设置端口白名单，否则链接不上。</p></li><li><p>服务端如果开启了防火墙，就需要设置防火墙开放端口。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加监听端口</span><br><span class="line">sudo firewall-cmd --permanent --add-port=8000/tcp</span><br><span class="line"># 添加管理后台端口</span><br><span class="line">sudo firewall-cmd --permanent --add-port=8080/tcp</span><br><span class="line"># 重新加载配置</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>使用systemd管理frp服务，示例为frps，frpc一样的操作。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 复制配置到systemd配置文件夹中</span><br><span class="line">cp systemd/frps.service /usr/lib/systemd/system/</span><br><span class="line"># 启用frps</span><br><span class="line">systemctl enable frps</span><br><span class="line"># 启动frps</span><br><span class="line">systemctl start frps</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>login to server failed: dial tcp x.xx.x.xxx:8000: connect: connection ref，客户端出现这个错误，检查客户端和服务端的bind_port和server_port一致不。</p></li><li><p>supervisord ERROR (spawn error)，出现这个错误，有一种可能是程序没执行起来，可以执行程序命令，看是否正常，确保没问题，在使用supervisord进行重启job。</p></li><li><p>frps日志写入无权限，systemd的frps.service配置中的user把nobody改为root，在改之前，先在进行systemctl stop frps，然后编辑修改，systemctl daemon-reload执行重新加载服务配置文件，然后在启动systemctl start frps。完成后可以去查看日志文件中是否写入了日志。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"># 这里改为root即可</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini</span><br><span class="line">LimitNOFILE=1048576</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数算法</title>
      <link href="/diary/%E5%9B%9E%E6%96%87%E6%95%B0.html"/>
      <url>/diary/%E5%9B%9E%E6%96%87%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h3 id="回文数算法"><a href="#回文数算法" class="headerlink" title="回文数算法"></a>回文数算法</h3><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><span id="more"></span><p>例如，121 是回文，而 123 不是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$num = $x;</span><br><span class="line">$cur = 0;</span><br><span class="line"></span><br><span class="line">while($num != 0) &#123;</span><br><span class="line">$cur = $cur * 10 + $num % 10;</span><br><span class="line">$num = (int)($num / 10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设$x = 129，按以上代码，$cur和$num会是如下的变动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">12</span><br><span class="line"></span><br><span class="line">92</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">921</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>要把一个数字反转，一个一个数字来看</p><p>129 取余10 得9，剩下了12</p><p>12取余10 得2，剩下了1</p><p>1取余10 得1</p><p>反向计算，每去一位，就得反向进一位，就相当于取到9 ，进行9 * 10 = 90，取到2 ，进行90 * 10，取到900，这样得到了百位数。</p><p>所以每次进行 进位 和 加上取余取到的数就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab-ci安装配置</title>
      <link href="/diary/gitlab-ci%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html"/>
      <url>/diary/gitlab-ci%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p>1 在项目中添加并编写.gitlab-ci.yml文件</p><p>2 在服务器安装gitlab-runner构建器</p><p>3 推送代码执行构建</p><span id="more"></span><p>1 文件格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 定义总共几部、每一步名称</span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - push</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line">// 定义变量, 在下面步骤中可以使用, 项目变量可以在 项目-&gt;设置-&gt;CICD-&gt;变量中设置, 通过$符号访问</span><br><span class="line">variables:</span><br><span class="line">  HARBOR_HOST: ccr.ccs.tencentyun.com</span><br><span class="line">  INAGE_NAME: nginx-agent</span><br><span class="line">  INAGE_NAMESPACE: threecat</span><br><span class="line">  IMAGE_ADDRESS: $HARBOR_HOST/$INAGE_NAMESPACE/$INAGE_NAME:$&#123;CI_COMMIT_REF_NAME&#125;-$&#123;CI_PIPELINE_ID&#125;</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  stage: build</span><br><span class="line">  // tag 在安装runner后，进行register的时候输入，用于过滤，JOB中不包含这个tag，不执行</span><br><span class="line">  tags:</span><br><span class="line">    - nginx-agent</span><br><span class="line">  before_script:</span><br><span class="line">    - echo $USER</span><br><span class="line">  script:</span><br><span class="line">    - docker build -t $IMAGE_ADDRESS .</span><br><span class="line">  only:</span><br><span class="line">    - main</span><br><span class="line"></span><br><span class="line">push:</span><br><span class="line">  stage: push</span><br><span class="line">  tags:</span><br><span class="line">    - nginx-agent</span><br><span class="line">  before_script:</span><br><span class="line">    - docker login $HARBOR_HOST -u $USER_NAME -p $USER_PASS</span><br><span class="line">  script:</span><br><span class="line">    - docker push $IMAGE_ADDRESS</span><br><span class="line">  after_script:</span><br><span class="line">    - docker rmi -f $IMAGE_ADDRESS</span><br><span class="line">  only:</span><br><span class="line">    - main</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  stage: deploy</span><br><span class="line">  tags:</span><br><span class="line">    - nginx-agent</span><br><span class="line">  script:</span><br><span class="line">    - echo success</span><br><span class="line">  only:</span><br><span class="line">    - main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2 安装步骤</p><p>Token和Url在项目-&gt;设置-&gt;CICD-&gt;Runner中获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Download the binary for your system</span><br><span class="line">sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64</span><br><span class="line"></span><br><span class="line"># Give it permissions to execute</span><br><span class="line">sudo chmod +x /usr/local/bin/gitlab-runner</span><br><span class="line"></span><br><span class="line"># Create a GitLab CI user</span><br><span class="line">sudo useradd --comment &#x27;GitLab Runner&#x27; --create-home gitlab-runner --shell /bin/bash</span><br><span class="line"></span><br><span class="line"># Install and run as service</span><br><span class="line">sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line">sudo gitlab-runner start</span><br><span class="line"></span><br><span class="line">sudo gitlab-runner register --url https://gitlab.com/ --registration-token $REGISTRATION_TOKEN</span><br></pre></td></tr></table></figure><p>3 推送代码即可触发。</p>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac上传文件到linux</title>
      <link href="/diary/mac%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0linux.html"/>
      <url>/diary/mac%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0linux.html</url>
      
        <content type="html"><![CDATA[<p>scp   frp_0.33.0_linux_amd64.tar.gz    <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#46;&#51;&#49;&#x2e;&#54;&#x35;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#46;&#51;&#49;&#x2e;&#54;&#x35;</a>:~/</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>转载</title>
      <link href="/diary/%E8%BD%AC%E8%BD%BD.html"/>
      <url>/diary/%E8%BD%AC%E8%BD%BD.html</url>
      
        <content type="html"><![CDATA[<h4 id="终端显示颜色文字"><a href="#终端显示颜色文字" class="headerlink" title="终端显示颜色文字"></a>终端显示颜色文字</h4><p>转载文章 : <a href="https://blog.csdn.net/u014470361/article/details/81512330">https://blog.csdn.net/u014470361/article/details/81512330</a></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;\033[1;40;32m color!!! \033[0m hello\n&quot;);</span><br><span class="line"></span><br><span class="line">\033 声明了转义序列的开始。</span><br><span class="line">[ 开始定义颜色。</span><br><span class="line">后面的 1 定义了高亮显示字符。</span><br><span class="line">然后是背景颜色，这里面是40，表示黑色背景。</span><br><span class="line">接着是前景颜色，这里面是32，表示绿色。</span><br><span class="line">\033[0m 关闭转义序列，\033[0m 是终端默认颜色。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">字颜色:30----37</span><br><span class="line">30:黑 </span><br><span class="line">31:红 </span><br><span class="line">32:绿 </span><br><span class="line">33:黄 </span><br><span class="line">34:蓝色 </span><br><span class="line">35:紫色 </span><br><span class="line">36:深绿 </span><br><span class="line">37:白色 </span><br><span class="line"></span><br><span class="line">字背景颜色范围:40----47</span><br><span class="line">40:黑 </span><br><span class="line">41:深红 </span><br><span class="line">42:绿 </span><br><span class="line">43:黄色 </span><br><span class="line">44:蓝色 </span><br><span class="line">45:紫色 </span><br><span class="line">46:深绿 </span><br><span class="line">47:白色</span><br><span class="line"></span><br><span class="line">字体加亮颜色:90----97</span><br><span class="line">90:黑 </span><br><span class="line">91:红 </span><br><span class="line">92:绿 </span><br><span class="line">93:黄 </span><br><span class="line">94:蓝色 </span><br><span class="line">95:紫色 </span><br><span class="line">96:深绿 </span><br><span class="line">97:白色</span><br><span class="line"></span><br><span class="line">背景加亮颜色范围:100----107</span><br><span class="line">40:黑 </span><br><span class="line">41:深红 </span><br><span class="line">42:绿 </span><br><span class="line">43:黄色 </span><br><span class="line">44:蓝色 </span><br><span class="line">45:紫色 </span><br><span class="line">46:深绿 </span><br><span class="line">47:白色</span><br><span class="line"></span><br><span class="line">ANSI控制码的说明 </span><br><span class="line"></span><br><span class="line">\33[0m 关闭所有属性 </span><br><span class="line">\33[1m 设置高亮度 </span><br><span class="line">\33[4m 下划线 </span><br><span class="line">\33[5m 闪烁 </span><br><span class="line">\33[7m 反显 </span><br><span class="line">\33[8m 消隐 </span><br><span class="line">\33[30m -- \33[37m 设置前景色 </span><br><span class="line">\33[40m -- \33[47m 设置背景色 </span><br><span class="line">\33[nA 光标上移n行 </span><br><span class="line">\33[nB 光标下移n行 </span><br><span class="line">\33[nC 光标右移n行 </span><br><span class="line">\33[nD 光标左移n行 </span><br><span class="line">\33[y;xH设置光标位置 </span><br><span class="line">\33[2J 清屏 </span><br><span class="line">\33[K 清除从光标到行尾的内容 </span><br><span class="line">\33[s 保存光标位置 </span><br><span class="line">\33[u 恢复光标位置 </span><br><span class="line">\33[?25l 隐藏光标 </span><br><span class="line">\33[?25h 显示光标</span><br></pre></td></tr></table></figure><p>当前主题</p><p><a href="https://github.com/jbreckmckye/hexo-theme-octo">https://github.com/jbreckmckye/hexo-theme-octo</a></p>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang常见问题</title>
      <link href="/diary/Golang%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
      <url>/diary/Golang%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h4 id="go-mod-download下载模块异常"><a href="#go-mod-download下载模块异常" class="headerlink" title="go mod download下载模块异常"></a>go mod download下载模块异常</h4><p>报如下错误 go.mod file not found in current directory or any parent directory，错误原因，命令执行的当前目录层级不对，检查mod文件是否在当前目录下或者父级目录下。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go: cannot match &quot;all&quot;: go.mod file not found in current directory or any parent directory; see &#x27;go help modules&#x27;</span><br></pre></td></tr></table></figure><h4 id="module-declares-its-path-as-第三方包无法安装问题"><a href="#module-declares-its-path-as-第三方包无法安装问题" class="headerlink" title="module declares its path as 第三方包无法安装问题"></a>module declares its path as 第三方包无法安装问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get: github.com/sanmiaohub/go-tools@v1.0.0: parsing go.mod:</span><br><span class="line">        module declares its path as: go-tools</span><br><span class="line">                but was required as: github.com/sanmiaohub/go-tools</span><br></pre></td></tr></table></figure><p>出现这种问题是go.mod的module设置错误，作为第三方包，对应的module为 github.com/sanmiaohub/go-tools 不应该按项目名为 go-tools。</p><p>我自己建立的两个项目，一个为项目，一个为第三方包，go.mod按以下方式设置。</p><p>项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module dsc</span><br><span class="line"></span><br><span class="line">go 1.16</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">github.com/sanmiaohub/go-tools v1.0.2 // indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第三方包（自己的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/sanmiaohu/go-tools</span><br><span class="line"></span><br><span class="line">go 1.17</span><br></pre></td></tr></table></figure><h4 id="日志logging实现方式"><a href="#日志logging实现方式" class="headerlink" title="日志logging实现方式"></a>日志logging实现方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 终端输出</span><br><span class="line">write, err := os.Stdout.Write([]byte(&quot;ssssss&quot;))</span><br><span class="line">// 文件写入</span><br><span class="line">file,err :=os.OpenFile(&quot;log1.json&quot;,os.O_WRONLY|os.O_APPEND|os.O_CREATE, os.ModeAppend|os.ModePerm)</span><br><span class="line">i,err := file.Write([]byte(&quot;&#123;\&quot;d11111sds\&quot;:\&quot;dsgssssfgg\&quot;&#125;&quot;))</span><br></pre></td></tr></table></figure><p>可以是通过配置来获取按哪种方式去记录日志，记录的文本风格，按interface去实现多种风格</p><h4 id="GOLANG设置代理"><a href="#GOLANG设置代理" class="headerlink" title="GOLANG设置代理"></a>GOLANG设置代理</h4><p>在 Linux 或 macOS 上面，需要运行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启用 Go Modules 功能</span><br><span class="line">export GO111MODULE=on</span><br><span class="line"># 配置 GOPROXY 环境变量</span><br><span class="line">export GOPROXY=https://goproxy.io</span><br></pre></td></tr></table></figure><p>如果你使用的 Go 版本&gt;=1.13, 你可以通过设置 GOPRIVATE 环境变量来控制哪些私有仓库和依赖(公司内部仓库)不通过 proxy 来拉取，直接走本地，设置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br><span class="line"># 设置不走 proxy 的私有仓库，多个用逗号相隔</span><br><span class="line">go env -w GOPRIVATE=*.corp.example.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常见问题</title>
      <link href="/diary/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
      <url>/diary/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h4 id="git删除本地和远程tag"><a href="#git删除本地和远程tag" class="headerlink" title="git删除本地和远程tag"></a>git删除本地和远程tag</h4><p>删除本地tag</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d tag-name</span><br></pre></td></tr></table></figure><p>删除远程tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/tag-name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Centos环境安装Jenkins</title>
      <link href="/diary/%E5%9C%A8Centos%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85Jenkins.html"/>
      <url>/diary/%E5%9C%A8Centos%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85Jenkins.html</url>
      
        <content type="html"><![CDATA[<p>按以下步骤进行操作，操作环境Centos8.4，启动后，默认的端口号为8080，使用<a href="http://ip:8080/">http://IP:8080</a> 即可访问进行初始化设置。</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk</span><br><span class="line"></span><br><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line"></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line"></span><br><span class="line">sudo dnf install jenkins</span><br><span class="line"></span><br><span class="line">sudo systemctl start jenkins</span><br><span class="line"></span><br><span class="line">sudo systemctl enable jenkins</span><br><span class="line"></span><br><span class="line">systemctl status jenkins</span><br><span class="line"></span><br><span class="line">配置文件地址</span><br><span class="line">/etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">安装家目录</span><br><span class="line">JENKINS_HOME=/var/lib/jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常见问题</title>
      <link href="/diary/Linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
      <url>/diary/Linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<p>1.env 获取所有环境变量 值为key=value列表</p><span id="more"></span><p>2 目录树状显示 tree -d -L 4 ci-cd </p><ul><li>-L level 限制目录显示层级。</li><li>-d 显示目录名称而非内容。</li><li>ci-cd 显示的目录及目录下的东西</li></ul><p>3 安装supervisor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install supervisor</span><br><span class="line"></span><br><span class="line">systemctl enable supervisord.service # 开机自启动</span><br><span class="line">systemctl start supervisord.service # 启动supervisord服务</span><br><span class="line">systemctl status supervisord.service # 查看supervisord服务状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frp.ini</span><br><span class="line"></span><br><span class="line">[frp-client]</span><br><span class="line">command = frpc -c frpc.ini</span><br><span class="line">directory = /root/frp/</span><br><span class="line">user = root</span><br><span class="line">stopsignal = INT  </span><br><span class="line">autostart = true</span><br><span class="line">autorestart = true</span><br><span class="line">startsecs = 1</span><br><span class="line">stderr_logfile = /var/log/frp-client.err.log</span><br><span class="line">stdout_logfile = /var/log/frp-client.out.log</span><br></pre></td></tr></table></figure><p>4 查看所有用户和用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有用户</span><br><span class="line">cat /etc/passwd</span><br><span class="line"></span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">nginx:x:997:995:Nginx web server:/var/lib/nginx:/sbin/nologin</span><br><span class="line">jenkins:x:996:992:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br><span class="line"></span><br><span class="line"># 查看所有用户组</span><br><span class="line">cat /etc/group</span><br><span class="line"></span><br><span class="line">chrony:x:996:</span><br><span class="line">nginx:x:995:</span><br><span class="line">docker:x:994:</span><br><span class="line">cgred:x:993:</span><br><span class="line">jenkins:x:992:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker常见问题</title>
      <link href="/diary/Docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
      <url>/diary/Docker%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h4 id="docker-–privileged-true-参数作用"><a href="#docker-–privileged-true-参数作用" class="headerlink" title="docker –privileged=true 参数作用"></a>docker –privileged=true 参数作用</h4><p>简单来说，就是增加容器的扩展特权，docker将允许访问主机上的所有设备。使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p><span id="more"></span><h4 id="容器执行sh文件无权限-sh-Permission-denied"><a href="#容器执行sh文件无权限-sh-Permission-denied" class="headerlink" title="容器执行sh文件无权限 sh: Permission denied"></a>容器执行sh文件无权限 sh: Permission denied</h4><p>在Dockerfile中添加如下代码。USER帮助你切换到指定用户而已，改变之后以此身份执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 命令。Chmod用来给文件读写执行权限。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> root</span><br><span class="line">chmod <span class="number">0755</span> 文件</span><br></pre></td></tr></table></figure><h4 id="Docker-ps显示完整容器相关信息"><a href="#Docker-ps显示完整容器相关信息" class="headerlink" title="Docker ps显示完整容器相关信息"></a>Docker ps显示完整容器相关信息</h4><p>通过下面的命令获取所有容器的相关信息，一般COMMAND会被遮挡，用此命令可以看到完整的信息。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a --no-trunc</span><br><span class="line"></span><br><span class="line">a213efc42bd6   threecat/dsc:api   <span class="string">&quot;/bin/sh -c &#x27;sh /go/bin/start.sh $&#123;RUN_MODE&#125;&#x27;&quot;</span>   <span class="number">44</span> hours ago   Up <span class="number">8</span> hours   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8082</span>-&gt;<span class="number">80</span>/tcp     dsc-api</span><br><span class="line"></span><br><span class="line"><span class="number">65</span>a8296880e4   <span class="number">3</span>f06de256c3c       <span class="string">&quot;docker-php-entrypoint php-fpm -F&quot;</span>               <span class="number">3</span> weeks ago    Up <span class="number">8</span> hours   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9000</span>-&gt;<span class="number">9000</span>/tcp   mod-public</span><br></pre></td></tr></table></figure><h4 id="Dockerfile中CMD无法获取build-arg构建传递的数据"><a href="#Dockerfile中CMD无法获取build-arg构建传递的数据" class="headerlink" title="Dockerfile中CMD无法获取build-arg构建传递的数据"></a>Dockerfile中CMD无法获取build-arg构建传递的数据</h4><p>Arg数据只能在构建时使用，而CMD在运行容器时执行。想要实现的方法是在Dockerfile中使用ENV设置环境变量，运行容器的时候执行sh脚本，去读取环境变量即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">ARG MOD=api</span><br><span class="line"></span><br><span class="line">ENV RUN_MODE $&#123;MOD&#125;</span><br><span class="line"></span><br><span class="line">CMD sh /go/bin/start.sh $&#123;RUN_MODE&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
